---
- name: Prepare release metadata for {{ spoa_item.key }} SPOA
  ansible.builtin.set_fact:
    spoa_release: "{{ spoa_item.value.release | default({}) }}"
    spoa_rhel_major: "{{ haproxy_decision_rhel_major_version | default(ansible_distribution_major_version | string) }}"

- name: Determine download details for {{ spoa_item.key }} SPOA
  ansible.builtin.set_fact:
    spoa_repo: "{{ spoa_release.get('repo', '') }}"
    spoa_version: "{{ spoa_release.get('version', '') }}"
    spoa_assets: "{{ spoa_release.get('assets', {}) }}"
    spoa_checksums: "{{ spoa_release.get('checksums', {}) }}"
    spoa_asset: "{{ spoa_release.get('assets', {}).get(spoa_rhel_major, '') }}"
    spoa_checksum: "{{ spoa_release.get('checksums', {}).get(spoa_rhel_major) }}"
    spoa_download_path: "{{ haproxy_decision_rhel_download_dir }}/{{ spoa_release.get('assets', {}).get(spoa_rhel_major, '') }}"
    spoa_url_template: "{{ spoa_release.get('url_template', haproxy_decision_spoa_release_url_template) }}"

- name: Determine install method for {{ spoa_item.key }} SPOA
  ansible.builtin.set_fact:
    spoa_use_release: "{{ (spoa_asset | default('') | string | length) > 0 }}"

- name: Determine package name for {{ spoa_item.key }} SPOA
  vars:
    spoa_package_source: "{{ spoa_item.value.get('package') }}"
  ansible.builtin.set_fact:
    spoa_package: >-
      {% if spoa_package_source is string %}
      {{ spoa_package_source }}
      {% elif spoa_package_source is mapping %}
      {{ spoa_package_source.get(ansible_os_family)
         or spoa_package_source.get('default')
         or '' }}
      {% else %}
      {{ spoa_package_source | default('') }}
      {% endif %}

- name: Compose download URL for {{ spoa_item.key }} SPOA
  ansible.builtin.set_fact:
    spoa_download_url: >-
      {{ spoa_url_template
         | replace('{repo}', spoa_repo)
         | replace('{version}', spoa_version)
         | replace('{asset}', spoa_asset) }}

- name: Install package for {{ spoa_item.key }} SPOA (Debian)
  ansible.builtin.package:
    name: "{{ spoa_package }}"
    state: "{{ haproxy_decision_spoa_package_state }}"
  when:
    - ansible_os_family == "Debian"
    - spoa_package | default('') | string | length > 0

- name: Validate release metadata for {{ spoa_item.key }} SPOA
  ansible.builtin.assert:
    that:
      - spoa_repo | length > 0
      - spoa_version | length > 0
      - spoa_asset | length > 0
    fail_msg: >-
      Missing release metadata for the {{ spoa_item.key }} SPOA on EL{{ spoa_rhel_major }}.
      Set the release information under haproxy_decision_spoas.{{ spoa_item.key }}.release.
  when:
    - ansible_os_family == "RedHat"
    - (spoa_use_release | bool)

- name: Download release artifact for {{ spoa_item.key }} SPOA
  ansible.builtin.get_url:
    url: "{{ spoa_download_url }}"
    dest: "{{ spoa_download_path }}"
    mode: "0644"
    checksum: "{{ spoa_checksum | default(omit) }}"
  register: haproxy_decision_spoa_download
  retries: "{{ haproxy_decision_download_retries }}"
  delay: "{{ haproxy_decision_download_delay }}"
  until: haproxy_decision_spoa_download is succeeded
  when:
    - ansible_os_family == "RedHat"
    - (spoa_use_release | bool)

- name: Install {{ spoa_item.key }} SPOA from downloaded RPM
  ansible.builtin.dnf:
    name: "{{ spoa_download_path }}"
    state: "{{ haproxy_decision_spoa_package_state }}"
    disable_gpg_check: "{{ haproxy_decision_rhel_disable_gpg_check | bool }}"
  when:
    - ansible_os_family == "RedHat"
    - (spoa_use_release | bool)

- name: Install package for {{ spoa_item.key }} SPOA (RedHat)
  ansible.builtin.dnf:
    name: "{{ spoa_package }}"
    state: "{{ haproxy_decision_spoa_package_state }}"
  when:
    - ansible_os_family == "RedHat"
    - not (spoa_use_release | bool)
    - spoa_package | default('') | string | length > 0

- name: Deploy environment file for {{ spoa_item.key }} SPOA
  ansible.builtin.template:
    src: "{{ spoa_item.value.env_template }}"
    dest: "{{ spoa_item.value.env_file }}"
    owner: "{{ haproxy_decision_spoa_env_owner }}"
    group: "{{ haproxy_decision_spoa_env_group }}"
    mode: "{{ haproxy_decision_spoa_env_mode }}"
  notify: "restart {{ spoa_item.value.service }}"
  when:
    - haproxy_decision_manage_spoa_env | bool
    - spoa_item.value.env_template is defined
    - spoa_item.value.env_file is defined

- name: Deploy SPOA configuration for {{ spoa_item.key }}
  ansible.builtin.template:
    src: "{{ spoa_item.value.config_template }}"
    dest: "{{ spoa_item.value.config_path }}"
    owner: "{{ haproxy_decision_spoa_config_owner }}"
    group: "{{ haproxy_decision_spoa_config_group }}"
    mode: "{{ haproxy_decision_spoa_config_mode }}"
  notify: reload haproxy
  when:
    - haproxy_decision_manage_spoa_configs | bool
    - spoa_item.value.config_template is defined
    - spoa_item.value.config_path is defined
